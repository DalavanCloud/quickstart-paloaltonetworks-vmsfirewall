{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "VM-Series Firewall Deployment template",
    "Parameters": {
        "AZSubnetIDLambda": {
            "Default": "None",
            "Description": "Subnet IDs of Lambda Function interface",
            "Type": "CommaDelimitedList"
        },
        "AZSubnetIDMgmt": {
            "Description": "Enter Subnet ID for the mgmt interface for all the AZs",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "AZSubnetIDNATGW": {
            "Default": "None",
            "Description": "Subnet IDs of AWS NAT Gateway ",
            "Type": "CommaDelimitedList"
        },
        "AZSubnetIDTrust": {
            "Description": "Enter Subnet ID for the trust interface for all the AZs",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "AZSubnetIDUntrust": {
            "Description": "Enter Subnet ID for the untrust interface for all the AZs",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "ELBName": {
            "Default": "public-elb",
            "Description": "Enter the name of the Elastic Load Balancer",
            "Type": "String"
        },
        "FWInstanceType": {
            "AllowedValues": [
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge"
            ],
            "Default": "m4.xlarge",
            "Description": "Enter the instance type and size that you want for the AutoScaled VM-Series firewall",
            "Type": "String"
        },
        "ILBName": {
            "Default": "private-ilb",
            "Description": "Enter the name of the Internal Load Balancer",
            "Type": "String"
        },
        "KeyDeLicense": {
            "Default": "",
            "Description": "Key used to de-license the PAN FW",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Amazon EC2 Key Pair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "KeyPANWFirewall": {
            "AllowedPattern": "[\\S0-9a-zA-Z]+",
            "Default": "LUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0=",
            "Description": "API Key associated to username/password of the VM-Series Firewall. By default it is admin/admin",
            "NoEcho": "true",
            "Type": "String"
        },
        "KeyPANWPanorama": {
            "Description": "API Key associated to username/password of the VM-Series Panorama. By default it is admin/admin",
            "NoEcho": "true",
            "Type": "String"
        },
        "MasterS3Bucket": {
            "Description": "Enter the name of the Bootstrap S3 bucket having bootstrap config",
            "MaxLength": "63",
            "MinLength": "3",
            "Type": "String"
        },
        "MaximumInstancesASG": {
            "Default": "3",
            "Description": "Maximum number of VM-Series firewal in the ASG",
            "Type": "Number"
        },
        "MinInstancesASG": {
            "Default": "1",
            "Description": "Minimum number of VM-Series firewall the ASG",
            "Type": "Number"
        },
        "NATGateway": {
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Default": "Yes",
            "Description": "Yes = If you created AWS NAT Gateway in each AZ, No = Use Public IPs",
            "Type": "String"
        },
        "PanFWLicenseType": {
            "AllowedValues": [
                "Bring-your-own-license",
                "Pay-as-you-go-bundle-1",
                "Pay-as-you-go-bundle-2"
            ],
            "Default": "Pay-as-you-go-bundle-2",
            "Description": "PANOS 8.0 License Type to select AMI Id",
            "Type": "String"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "paloaltonetworks/vmsfirewall/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "SSHLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Default": "199.167.52.5/32",
            "Description": "Restruit SSH access to the VM-Series firewall (by default can be accessed from anywhere)",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "ScaleDownThreshold": {
            "Default": "40",
            "Description": "Value at which ScaleDown event would take place",
            "Type": "Number"
        },
        "ScaleUpThreshold": {
            "Default": "80",
            "Description": "Value at which ScaleUp event would take place",
            "Type": "Number"
        },
        "ScalingParameter": {
            "AllowedValues": [
                "DataPlaneCPUUtilization",
                "ActiveSessions",
                "DataPlaneBufferUtilization"
            ],
            "Default": "DataPlaneCPUUtilization",
            "Description": "Refer to guide for recommended values for ScaleUp and ScaleDown",
            "Type": "String"
        },
        "ScalingPeriod": {
            "Default": "900",
            "Description": "The period in seconds over which the average statistic is applied. Must be multiple of 60",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Default": "192.168.0.0/16",
            "Description": "Enter the VPC CIDR that you want to use",
            "Type": "String"
        },
        "VPCID": {
            "Description": "VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "PANFW8BYOL": "PA-VM-AWS-8.0.0-7064e142-2859-40a4-ab62-8b0996b842e9-ami-29de223f.3",
                "PANFW8PAYG1": "PA-VM-AWS-8.0.0-6f2a9521-7dc3-46cc-8891-8c4d02d29666-ami-29de223f.3",
                "PANFW8PAYG2": "PA-VM-AWS-8.0.0-8736f7a7-35b2-4e03-a8eb-6a749a987428-ami-29de223f.3"
            },
            "ap-northeast-1": {
                "PANFW8BYOL": "ami-a8bef8cf",
                "PANFW8PAYG1": "ami-56bff931",
                "PANFW8PAYG2": "ami-4bbcfa2c"
            },
            "ap-southeast-1": {
                "PANFW8BYOL": "ami-55bb0f36",
                "PANFW8PAYG1": "ami-a5bb0fc6",
                "PANFW8PAYG2": "ami-17a41074"
            },
            "ap-southeast-2": {
                "PANFW8BYOL": "ami-2f3e384c",
                "PANFW8PAYG1": "ami-cc3335af",
                "PANFW8PAYG2": "ami-10303673"
            },
            "eu-central-1": {
                "PANFW8BYOL": "ami-bb3af3d4",
                "PANFW8PAYG1": "ami-e43df48b",
                "PANFW8PAYG2": "ami-e93df486"
            },
            "eu-west-1": {
                "PANFW8BYOL": "ami-32fca754",
                "PANFW8PAYG1": "ami-abffa4cd",
                "PANFW8PAYG2": "ami-43f1aa25"
            },
            "us-east-1": {
                "PANFW8BYOL": "ami-f22cd7e4",
                "PANFW8PAYG1": "ami-4222d954",
                "PANFW8PAYG2": "ami-2127dc37"
            },
            "us-east-2": {
                "PANFW8BYOL": "ami-360c2953",
                "PANFW8PAYG1": "ami-0e0d286b",
                "PANFW8PAYG2": "ami-810d28e4"
            },
            "us-west-1": {
                "PANFW8BYOL": "ami-a1a5f8c1",
                "PANFW8PAYG1": "ami-59a3fe39",
                "PANFW8PAYG2": "ami-84a1fce4"
            },
            "us-west-2": {
                "PANFW8BYOL": "ami-ca14afaa",
                "PANFW8PAYG1": "ami-9c15aefc",
                "PANFW8PAYG2": "ami-e614af86"
            }
        },
        "PanFWAMINameMap": {
            "Bring-your-own-license": {
                "Code": "PANFW8BYOL"
            },
            "Pay-as-you-go-bundle-1": {
                "Code": "PANFW8PAYG1"
            },
            "Pay-as-you-go-bundle-2": {
                "Code": "PANFW8PAYG2"
            }
        }
    },
    "Conditions": {
        "NATGatewayRequired": {
            "Fn::Equals": [
                {
                    "Ref": "NATGateway"
                },
                "Yes"
            ]
        }
    },
    "Rules": {
        "AZSubnetIDMgmt": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "Subnets must belong to the same VPC"
                }
            ]
        },
        "AZSubnetIDUntrust": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "Subnets must belong to the same VPC"
                }
            ]
        },
        "AZSubnetIDTrust": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "Subnets must belong to the same VPC"
                }
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "VPC Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "VPCCIDR",
                        "AZSubnetIDMgmt",
                        "AZSubnetIDUntrust",
                        "AZSubnetIDTrust",
                        "AZSubnetIDLambda",
                        "AZSubnetIDNATGW",
                        "NATGateway"
                    ]
                },
                {
                    "Label": {
                        "default": "VM-Series firewall Instance configuration"
                    },
                    "Parameters": [
                        "FWInstanceType",
                        "PanFWLicenseType",
                        "KeyName",
                        "SSHLocation"
                    ]
                },
                {
                    "Label": {
                        "default": "S3 Bucket details"
                    },
                    "Parameters": [
                        "MasterS3Bucket"
                    ]
                },
                {
                    "Label": {
                        "default": "VM-Series API Key"
                    },
                    "Parameters": [
                        "KeyPANWFirewall",
                        "KeyPANWPanorama"
                    ]
                },
                {
                    "Label": {
                        "default": "Load Balancer configuration"
                    },
                    "Parameters": [
                        "ELBName",
                        "ILBName"
                    ]
                },
                {
                    "Label": {
                        "default": "Auto Scaling Group configurations"
                    },
                    "Parameters": [
                        "ScalingParameter",
                        "ScalingPeriod",
                        "MaximumInstancesASG",
                        "MinInstancesASG",
                        "ScaleDownThreshold",
                        "ScaleUpThreshold"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "AZSubnetIDLambda": {
                    "default": "Subnet ID for Lambda:"
                },
                "AZSubnetIDMgmt": {
                    "default": "Subnet ID of Management Interface:"
                },
                "AZSubnetIDNATGW": {
                    "default": "Subnet ID for AWS NAT Gateway:"
                },
                "AZSubnetIDTrust": {
                    "default": "Subnet ID of Trust Interface:"
                },
                "AZSubnetIDUntrust": {
                    "default": "Subnet ID of Untrust Interface:"
                },
                "ELBName": {
                    "default": "Name of Elastic Load Balancer:"
                },
                "FWInstanceType": {
                    "default": "Firewall Instance size:"
                },
                "ILBName": {
                    "default": "Name of Internal Load Balancer:"
                },
                "KeyName": {
                    "default": "Key pair:"
                },
                "KeyPANWFirewall": {
                    "default": "API Key for Firewall:"
                },
                "KeyPANWPanorama": {
                    "default": "API Key for Panorama:"
                },
                "MasterS3Bucket": {
                    "default": "Bootstrap bucket for VM-Series firewalls"
                },
                "MaximumInstancesASG": {
                    "default": "Maximum VM-Series Instances:"
                },
                "MinInstancesASG": {
                    "default": "Minimum VM-Series Instances:"
                },
                "NATGateway": {
                    "default": "Select Yes if you created AWS NAT Gateway"
                },
                "PanFWLicenseType": {
                    "default": "PAN Firewall 8.0 License Type"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "SSHLocation": {
                    "default": "SSH From:"
                },
                "ScaleDownThreshold": {
                    "default": "ScaleDown threshold value in percentage/value:"
                },
                "ScaleUpThreshold": {
                    "default": "ScaleUp threshold value in percentage/value:"
                },
                "ScalingParameter": {
                    "default": "Choose your Scaling Parameter:"
                },
                "ScalingPeriod": {
                    "default": "Choose time in seconds for ScaleUp or ScaleIn event:"
                },
                "VPCID": {
                    "default": "Select VPC ID from the list:"
                }
            }
        }
    },
    "Resources": {
        "FirewallBootstrapRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "FirewallBootstrapRolePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:ListBucket",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "MasterS3Bucket"
                                                }
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:GetObject",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "MasterS3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "FirewallBootstrapInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "FirewallBootstrapRole"
                    }
                ]
            },
            "DependsOn": [
                "FirewallBootstrapRole"
            ]
        },
        "MgmtSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH to MGMT interface",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "MgmtSecurityGroup"
                                ]
                            ]
                        }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "UntrustSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group for Untrust interface",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "UntrustSecurityGroup"
                                ]
                            ]
                        }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "TrustSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group for trust interface",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "TrustSecurityGroup"
                                ]
                            ]
                        }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "VPCSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group for within VPC",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "VPCSecurityGroup"
                                ]
                            ]
                        }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LambdaExecutionRolePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:ListBucket",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "MasterS3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:GetObject",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "MasterS3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:ListBucket",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "QSS3BucketName"
                                                }
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:GetObject",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "QSS3BucketName"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AllocateAddress",
                                        "ec2:AssociateAddress",
                                        "ec2:AssociateRouteTable",
                                        "ec2:AttachInternetGateway",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:CreateTags",
                                        "ec2:DeleteNetworkInterface",
                                        "ec2:DeleteRouteTable",
                                        "ec2:DeleteSecurityGroup",
                                        "ec2:DeleteTags",
                                        "ec2:DescribeAddresses",
                                        "ec2:DescribeAvailabilityZones",
                                        "ec2:DescribeInstanceAttribute",
                                        "ec2:DescribeInstanceStatus",
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeImages",
                                        "ec2:DescribeNatGateways",
                                        "ec2:DescribeNetworkInterfaceAttribute",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DescribeTags",
                                        "ec2:DescribeVpcEndpoints",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:DetachInternetGateway",
                                        "ec2:DetachNetworkInterface",
                                        "ec2:DetachVolume",
                                        "ec2:DisassociateAddress",
                                        "ec2:DisassociateRouteTable",
                                        "ec2:ModifyNetworkInterfaceAttribute",
                                        "ec2:ModifySubnetAttribute",
                                        "ec2:MonitorInstances",
                                        "ec2:RebootInstances",
                                        "ec2:ReleaseAddress",
                                        "ec2:ReportInstanceStatus",
                                        "ec2:TerminateInstances",
                                        "ec2:DescribeIdFormat"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "events:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:AddPermission",
                                        "lambda:CreateEventSourceMapping",
                                        "lambda:CreateFunction",
                                        "lambda:DeleteEventSourceMapping",
                                        "lambda:DeleteFunction",
                                        "lambda:GetEventSourceMapping",
                                        "lambda:ListEventSourceMappings",
                                        "lambda:RemovePermission",
                                        "lambda:UpdateEventSourceMapping",
                                        "lambda:UpdateFunctionCode",
                                        "lambda:UpdateFunctionConfiguration",
                                        "lambda:GetFunction",
                                        "lambda:ListFunctions"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sqs:ReceiveMessage",
                                        "sqs:SendMessage",
                                        "sqs:SetQueueAttributes",
                                        "sqs:PurgeQueue"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticloadbalancing:AddTags",
                                        "elasticloadbalancing:AttachLoadBalancerToSubnets",
                                        "elasticloadbalancing:ConfigureHealthCheck",
                                        "elasticloadbalancing:DescribeInstanceHealth",
                                        "elasticloadbalancing:DescribeLoadBalancerAttributes",
                                        "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
                                        "elasticloadbalancing:DescribeLoadBalancerPolicies",
                                        "elasticloadbalancing:DescribeLoadBalancers",
                                        "elasticloadbalancing:DescribeTags",
                                        "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                                        "elasticloadbalancing:ModifyLoadBalancerAttributes",
                                        "elasticloadbalancing:RemoveTags"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole",
                                        "iam:GetRole"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:DescribeStacks"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutDestination",
                                        "logs:PutDestinationPolicy",
                                        "logs:PutLogEvents",
                                        "logs:PutMetricFilter"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AddENILambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "add_eni.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "QSS3BucketName"
                    },
                    "S3Key": {
                        "Fn::Sub": "${QSS3KeyPrefix}scripts/panw-aws/panw-aws.zip"
                    }
                },
                "Runtime": "python2.7",
                "Timeout": "300",
                "VpcConfig": {
                    "SubnetIds": {
                        "Fn::If": [
                            "NATGatewayRequired",
                            {
                                "Ref": "AZSubnetIDLambda"
                            },
                            []
                        ]
                    },
                    "SecurityGroupIds": {
                        "Fn::If": [
                            "NATGatewayRequired",
                            [
                                {
                                    "Ref": "VPCSecurityGroup"
                                }
                            ],
                            []
                        ]
                    }
                }
            },
            "DependsOn": [
                "LambdaExecutionRole",
                "VPCSecurityGroup"
            ]
        },
        "LambdaENIQueue": {
            "Type": "AWS::SQS::Queue",
            "DependsOn": [
                "InitLambda"
            ]
        },
        "LambdaENISNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "AddENILambda",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ]
            },
            "DependsOn": [
                "AddENILambda"
            ]
        },
        "LambdaENIPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AddENILambda",
                        "Arn"
                    ]
                },
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "LambdaENISNSTopic"
                }
            },
            "DependsOn": [
                "AddENILambda",
                "LambdaENISNSTopic"
            ]
        },
        "ASGNotifierRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "ASGNotifierRolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "ASGNotifierRolePolicy"
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "sns:Publish",
                            "Resource": {
                                "Ref": "LambdaENISNSTopic"
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "ASGNotifierRole"
                    }
                ]
            },
            "DependsOn": [
                "ASGNotifierRole",
                "LambdaENISNSTopic"
            ]
        },
        "InitLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "init.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "QSS3BucketName"
                    },
                    "S3Key": {
                        "Fn::Sub": "${QSS3KeyPrefix}scripts/panw-aws/panw-aws.zip"
                    }
                },
                "Runtime": "python2.7",
                "Timeout": "300"
            },
            "DependsOn": [
                "LambdaExecutionRole"
            ]
        },
        "LambdaCustomResource": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "DependsOn": [
                "AddENILambda",
                "InitLambda",
                "TrustSecurityGroup",
                "UntrustSecurityGroup",
                "MgmtSecurityGroup",
                "VPCSecurityGroup"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "InitLambda",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "VPCID": {
                    "Ref": "VPCID"
                },
                "SubnetIDMgmt": {
                    "Ref": "AZSubnetIDMgmt"
                },
                "SubnetIDUntrust": {
                    "Ref": "AZSubnetIDUntrust"
                },
                "SubnetIDTrust": {
                    "Ref": "AZSubnetIDTrust"
                },
                "MgmtSecurityGroup": {
                    "Ref": "MgmtSecurityGroup"
                },
                "UntrustSecurityGroup": {
                    "Ref": "UntrustSecurityGroup"
                },
                "TrustSecurityGroup": {
                    "Ref": "TrustSecurityGroup"
                },
                "VPCSecurityGroup": {
                    "Ref": "VPCSecurityGroup"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ELBName": {
                    "Ref": "ELBName"
                },
                "ILBName": {
                    "Ref": "ILBName"
                },
                "FWInstanceType": {
                    "Ref": "FWInstanceType"
                },
                "SSHLocation": {
                    "Ref": "SSHLocation"
                },
                "MaximumInstancesASG": {
                    "Ref": "MaximumInstancesASG"
                },
                "ScaleUpThreshold": {
                    "Ref": "ScaleUpThreshold"
                },
                "ScaleDownThreshold": {
                    "Ref": "ScaleDownThreshold"
                },
                "ScalingParameter": {
                    "Ref": "ScalingParameter"
                },
                "ScalingPeriod": {
                    "Ref": "ScalingPeriod"
                },
                "ImageID": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "PanFWAMINameMap",
                                {
                                    "Ref": "PanFWLicenseType"
                                },
                                "Code"
                            ]
                        }
                    ]
                },
                "LambdaENISNSTopic": {
                    "Ref": "LambdaENISNSTopic"
                },
                "MinInstancesASG": {
                    "Ref": "MinInstancesASG"
                },
                "FirewallBootstrapRole": {
                    "Ref": "FirewallBootstrapInstanceProfile"
                },
                "LambdaExecutionRole": {
                    "Ref": "LambdaExecutionRole"
                },
                "ASGNotifierRole": {
                    "Fn::GetAtt": [
                        "ASGNotifierRole",
                        "Arn"
                    ]
                },
                "ASGNotifierRolePolicy": {
                    "Ref": "ASGNotifierRolePolicy"
                },
                "MasterS3Bucket": {
                    "Ref": "MasterS3Bucket"
                },
                "PanS3BucketTpl": {
                    "Ref": "QSS3BucketName"
                },
                "PanS3KeyTpl": {
                    "Fn::Sub": "${QSS3KeyPrefix}scripts/panw-aws/panw-aws.zip"
                },
                "KeyPANWFirewall": {
                    "Ref": "KeyPANWFirewall"
                },
                "KeyPANWPanorama": {
                    "Ref": "KeyPANWPanorama"
                },
                "NATGateway": {
                    "Ref": "NATGateway"
                },
                "SubnetIDNATGW": {
                    "Ref": "AZSubnetIDNATGW"
                },
                "SubnetIDLambda": {
                    "Ref": "AZSubnetIDLambda"
                },
                "AddENILambda": {
                    "Ref": "AddENILambda"
                },
                "InitLambda": {
                    "Ref": "InitLambda"
                },
                "Version": {
                    "Fn::Sub": "${QSS3KeyPrefix}scripts/panw-aws/panw-aws.zip"
                },
                "KeyDeLicense": {
                    "Ref": "KeyDeLicense"
                },
                "LambdaENIQueue": {
                    "Ref": "LambdaENIQueue"
                }
            }
        }
    },
    "Outputs": {
        "BootstrapS3Bucket": {
            "Description": "Your Bootstrap bucket being used for this deployment",
            "Value": {
                "Ref": "MasterS3Bucket"
            }
        },
        "ELBName": {
            "Description": "Elastic Load Balancer (Public)",
            "Value": {
                "Ref": "ELBName"
            }
        },
        "ILBName": {
            "Description": "Internal Load Balancer (Private)",
            "Value": {
                "Ref": "ILBName"
            }
        },
        "KeyName": {
            "Description": "Key Pair you have selected for SSH",
            "Value": {
                "Ref": "KeyName"
            }
        },
        "SSHLocation": {
            "Description": "Make sure you SSH from this IP address",
            "Value": {
                "Ref": "SSHLocation"
            }
        },
        "ScalingParameter": {
            "Description": "Scaling Parameter you have selected",
            "Value": {
                "Ref": "ScalingParameter"
            }
        }
    }
}